use std::env;
use std::fs;
use std::path::Path;

const ASSETS_DIR: &'static str = "public";

fn main() {
    println!("cargo:rerun-if-changed={:?}", ASSETS_DIR);

    let mut lines: Vec<String> = Vec::new();
    for entry in fs::read_dir(ASSETS_DIR).unwrap() {
        let path_str = entry
            .unwrap()
            .path()
            .into_os_string()
            .into_string()
            .unwrap();

        // Use the debug print here as it will escape windows \ slashes and insert quote marks
        lines.push(format!("\tmanifest.insert({:?}, {:?});\n", path_str, path_str));
        println!("cargo:rerun-if-changed={:?}", path_str);
    }

    let manifest_str = format!("{{\n\t{}\n}}", lines.join(""));

    let out_dir = env::var_os("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("autogenerated_manifest.rs");
    fs::write(&dest_path, manifest_str).unwrap();
}
